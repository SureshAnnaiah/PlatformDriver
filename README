why do we need platform driver?
  In a embedded world ,there are plenty of devices that are inherently not discoverbale 
  by CPU (not connected through a bus that supports enumeration).
   
  So we can make use of platform driver and platform device infrastructure provided by kernel to overcome
  those situations.

what is platform device and how it is different from other devices?
  platform devices are inherently not discoverable (directly connected to CPU). So we can use platform device 
infrastructure to tell the kernel about their existence and to find associated driver.  

DataStructure:
struct platform_device
{
  const char	*name;
	int		id;
	struct device	dev;
	u32		num_resources;
	struct resource	*resource;
	const struct platform_device_id	*id_entry;
	...
};

  int platform_device_register(struct platform_device *pdev);    // to register a platform device


what is platform driver and how it is different from other drivers?
   you can bound a driver with platform device by registering it with kernel using    
   int platform_driver_register(struct platform_driver *driver); function
   
   DataStructure:
  struct platform_driver {
	  int (*probe)(struct platform_device *);
	  int (*remove)(struct platform_device *);
	  void (*shutdown)(struct platform_device *);
	  int (*suspend)(struct platform_device *, pm_message_t state);
	  int (*resume)(struct platform_device *);
	  struct device_driver driver;
	  const struct platform_device_id *id_table;
  };

   

